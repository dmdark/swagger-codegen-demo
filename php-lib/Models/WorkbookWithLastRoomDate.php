<?php
/**
 * WorkbookWithLastRoomDate
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoomsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vimbox-rooms
 *
 * Beta
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoomsApi\Models;

use \ArrayAccess;
use \RoomsApi\ObjectSerializer;

/**
 * WorkbookWithLastRoomDate Class Doc Comment
 *
 * @category Class
 * @package  RoomsApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkbookWithLastRoomDate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkbookWithLastRoomDate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'lessonId' => 'int',
        'lessonRevId' => 'int',
        'homework' => '\RoomsApi\Models\WorkbookHomeworkInfo',
        'test' => '\RoomsApi\Models\WorkbookTestInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'lessonId' => null,
        'lessonRevId' => null,
        'homework' => null,
        'test' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'lessonId' => 'lessonId',
        'lessonRevId' => 'lessonRevId',
        'homework' => 'homework',
        'test' => 'test'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'lessonId' => 'setLessonId',
        'lessonRevId' => 'setLessonRevId',
        'homework' => 'setHomework',
        'test' => 'setTest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'lessonId' => 'getLessonId',
        'lessonRevId' => 'getLessonRevId',
        'homework' => 'getHomework',
        'test' => 'getTest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lessonId'] = isset($data['lessonId']) ? $data['lessonId'] : null;
        $this->container['lessonRevId'] = isset($data['lessonRevId']) ? $data['lessonRevId'] : null;
        $this->container['homework'] = isset($data['homework']) ? $data['homework'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lessonId
     *
     * @return int
     */
    public function getLessonId()
    {
        return $this->container['lessonId'];
    }

    /**
     * Sets lessonId
     *
     * @param int $lessonId lessonId
     *
     * @return $this
     */
    public function setLessonId($lessonId)
    {
        $this->container['lessonId'] = $lessonId;

        return $this;
    }

    /**
     * Gets lessonRevId
     *
     * @return int
     */
    public function getLessonRevId()
    {
        return $this->container['lessonRevId'];
    }

    /**
     * Sets lessonRevId
     *
     * @param int $lessonRevId lessonRevId
     *
     * @return $this
     */
    public function setLessonRevId($lessonRevId)
    {
        $this->container['lessonRevId'] = $lessonRevId;

        return $this;
    }

    /**
     * Gets homework
     *
     * @return \RoomsApi\Models\WorkbookHomeworkInfo
     */
    public function getHomework()
    {
        return $this->container['homework'];
    }

    /**
     * Sets homework
     *
     * @param \RoomsApi\Models\WorkbookHomeworkInfo $homework homework
     *
     * @return $this
     */
    public function setHomework($homework)
    {
        $this->container['homework'] = $homework;

        return $this;
    }

    /**
     * Gets test
     *
     * @return \RoomsApi\Models\WorkbookTestInfo
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param \RoomsApi\Models\WorkbookTestInfo $test test
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


